apiVersion: v1
kind: ConfigMap
metadata:
  name: buildbot-master.cfg
data:
  master.cfg: |-
    # -*- python -*-
    # ex: set filetype=python:
    # https://github.com/buildbot/buildbot/blob/master/smokes/master.cfg

    import os
    from buildbot.plugins import *

    # This is a sample buildmaster config file. It must be installed as
    # 'master.cfg' in your buildmaster's base directory.

    # This is the dictionary that the buildmaster pays attention to. We also use
    # a shorter alias to save typing.
    c = BuildmasterConfig = {}

    ####### WORKERS

    # The 'workers' list defines the set of recognized workers. Each element is
    # a Worker object, specifying a unique worker name and password.  The same
    # worker name and password must be configured on the worker.
    num_workers = int(os.environ.get('NUM_WORKERS', 1))
    worker_password = os.environ['WORKER_PASSWORD']

    c['workers'] = [
        worker.Worker("example-worker-{0}".format(worker_id) , worker_password)
        for worker_id in range(num_workers)
    ]


    c['mq'] = {
        'type': 'wamp',
        'router_url': 'ws://crossbar:8080/ws',
        'realm': 'realm1',
    }

    # 'protocols' contains information about protocols which master will use for
    # communicating with workers. You must define at least 'port' option that workers
    # could connect to your master with this protocol.
    # 'port' must match the value configured into the workers (with their
    # --master option)
    c['protocols'] = {'pb': {'port': 9989}}

    ####### CHANGESOURCES

    # the 'change_source' setting tells the buildmaster how it should find out
    # about source code changes.  Here we point to the buildbot clone of pyflakes.

    c['change_source'] = []
    c['change_source'].append(changes.GitPoller(
            'https://github.com/buildbot/hello-world.git',  # the buildbot clone of pyflakes
            workdir='gitpoller-workdir', branch='master',
            pollinterval=300))

    ####### SCHEDULERS

    # Configure the Schedulers, which decide how to react to incoming changes.  In this
    # case, just kick off a 'runtests' build

    c['schedulers'] = []
    c['schedulers'].append(schedulers.SingleBranchScheduler(
                                name="all",
                                change_filter=util.ChangeFilter(branch='master'),
                                treeStableTimer=None,
                                builderNames=["runtests"]))

    c['schedulers'].append(schedulers.ForceScheduler(
                                name="force",
                                builderNames=["runtests", "slowruntests"]))

    c['schedulers'].append(schedulers.ForceScheduler(
        name="custom",
        builderNames=["runtests"],
        buttonName="Start Custom Build",
        codebases = [util.CodebaseParameter(
            codebase='', project=None,
            branch=util.ChoiceStringParameter(
                name="branch",
                label="Branch",
                strict=False,
                choices=["master", "dev"],
                autopopulate={
                  'master': {
                    'build_name': 'master',
                  },
                  'dev': {
                    'build_name': 'dev',
                  }
                }
        ))],
        properties=[
            util.StringParameter(
                name="build_name",
                label="Name of the Build release.",
                default="")]))

    ####### BUILDERS

    # The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
    # what steps, and which workers can execute them.  Note that any particular build will
    # only take place on one worker.

    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl='https://github.com/buildbot/hello-world', mode='incremental'))
    # run the tests (note that this will require that 'trial' is installed)
    factory.addStep(steps.ShellCommand(command=["trial", "hello"],
                                      env={"PYTHONPATH": "."}))

    slowfactory = util.BuildFactory()
    slowfactory.addStep(steps.Git(repourl='https://github.com/buildbot/hello-world.git',
                                  mode='incremental'))
    slowfactory.addStep(steps.ShellCommand(command=["trial", "hello"],
                                          env={"PYTHONPATH": "."}))
    slowfactory.addStep(steps.ShellCommand(command=["sleep", "10"]))

    c['builders'] = []
    c['builders'].append(
        util.BuilderConfig(name="slowruntests",
                          tags=['slow', 'runt'],
                          workernames=[worker.name for worker in c['workers']],
                          factory=slowfactory))

    c['builders'].append(
        util.BuilderConfig(name="runtests",
          workernames=[worker.name for worker in c['workers']],
          factory=factory))

    ####### BUILDBOT SERVICES

    # 'services' is a list of BuildbotService items like reporter targets. The
    # status of each build will be pushed to these targets. buildbot/reporters/*.py
    # has a variety to choose from, like IRC bots.

    c['services'] = []

    ####### PROJECT IDENTITY

    # the 'title' string will appear at the top of this buildbot installation's
    # home pages (linked to the 'titleURL').

    c['title'] = "Hello World CI"
    c['titleURL'] = "https://buildbot.github.io/hello-world/"
    c['buildbotNetUsageData'] = 'basic'

    # the 'buildbotURL' string should point to the location where the buildbot's
    # internal web server is visible. This typically uses the port number set in
    # the 'www' entry below, but with an externally-visible host name which the
    # buildbot cannot figure out without some help.

    c['buildbotURL'] = os.environ.get('BUILDBOT_MASTER_URL', 'http://localhost:8010/')

    # minimalistic config to activate new web UI
    c['www'] = dict(port=8010,
                    plugins=dict(waterfall_view={}, console_view={}))

    ####### DB URL

    c['db'] = {
        # This specifies what database buildbot uses to store its state.  You can leave
        # this at its default for all but the largest installations.
        'db_url' : "postgresql+psycopg2://buildbot:{PG_PASSWORD}@pg-buildbot/buildbot".format(
            **os.environ
        ),
    }

    ###### AUTH

    # authz = util.Authz(
    #   allowRules=[
    #   ],
    #   roleMatchers=[
    #     util.RolesFromEmails(admins=["my@email.com"])
    #   ]
    # )
    # auth=util.UserPasswordAuth({'my@email.com': b'mypass'})
    # c['www']['auth'] = auth
    # c['www']['authz'] = authz